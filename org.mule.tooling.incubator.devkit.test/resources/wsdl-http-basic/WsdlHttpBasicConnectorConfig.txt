/**
 * (c) 2003-2015 MuleSoft, Inc. The software in this package is published under the terms of the CPAL v1.0 license,
 * a copy of which has been included with this distribution in the LICENSE.md file.
 */

package org.mule.modules.cloud.config;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.mule.api.MuleContext;
import org.mule.api.MuleException;
import org.mule.api.annotations.ws.WsdlTransportResolver;
import org.mule.devkit.api.lifecycle.LifeCycleManager;
import org.mule.devkit.api.ws.transport.HttpRequesterConfigWsdlTransport;
import org.mule.devkit.api.ws.transport.WsdlTransport;
import org.mule.module.http.api.HttpConstants;
import org.mule.module.http.api.requester.HttpRequesterConfig;
import org.mule.module.http.api.requester.HttpRequesterConfigBuilder;
import org.mule.module.http.api.requester.authentication.BasicAuthenticationBuilder;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.param.Optional;
import org.mule.api.annotations.display.Password;
import org.mule.api.annotations.display.Placement;
import org.mule.api.annotations.components.WsdlProvider;
import org.mule.api.annotations.ws.WsdlServiceAddressResolver;
import org.mule.api.annotations.ws.WsdlServiceDefinitionRetriever;
import org.mule.devkit.api.ws.definition.DefaultServiceDefinition;
import org.mule.devkit.api.ws.definition.ServiceDefinition;

/**
 * Wsdl type Config
 *
 * @author MuleSoft, Inc.
 */
@WsdlProvider(configElementName = "config-type", friendlyName = "Configuration type config")
public class ConnectorConfig {

    private HttpRequesterConfig httpRequesterConfig;

    @WsdlTransportResolver
    public WsdlTransport resolveTransport() {
        // Basic Http Authentication, keep in mind that the initialization of the DefaultHttpRequesterConfig is up to
        // connectors' developer
        return new HttpRequesterConfigWsdlTransport(httpRequesterConfig);
    }

    public void initializeMuleContext(MuleContext muleContext) throws MuleException {
        HttpRequesterConfigBuilder httpRequesterConfigBuilder = new HttpRequesterConfigBuilder(muleContext);

        BasicAuthenticationBuilder basicAuthenticationBuilder = new BasicAuthenticationBuilder(muleContext);
        basicAuthenticationBuilder.setUsername(getUsername());
        basicAuthenticationBuilder.setPassword(getPassword());
        httpRequesterConfigBuilder.setAuthentication(basicAuthenticationBuilder.build());

        httpRequesterConfigBuilder.setProtocol(HttpConstants.Protocols.HTTPS);
        httpRequesterConfigBuilder.setHostExpression(getAddress());
        httpRequesterConfigBuilder.setPort(443);

        httpRequesterConfig = httpRequesterConfigBuilder.build();
        LifeCycleManager.executeInitialiseAndStart(httpRequesterConfig);
    }

    /**
     * Username used to initialise a ServiceNow session.
     */
    @Configurable
    @Placement(order = 1, group = "Connection")
    private String username;

    /**
     * Password to authenticate the user.
     */
    @Configurable
    @Placement(order = 2, group = "Connection")
    @Password
    private String password;

    @Configurable
    @Optional
    @Placement(order = 3, group = "Connection")
    private String address;

    @WsdlServiceDefinitionRetriever
    public List<ServiceDefinition> getServiceDefinition() {

        List<ServiceDefinition> serviceDefinitions = new ArrayList<ServiceDefinition>();

        serviceDefinitions.add(new DefaultServiceDefinition(
                "SforceService_Soap",
                "Salesforce API",
                "wsdl/enterprise.wsdl",
                "SforceService", 
                "Soap")
        );
        return serviceDefinitions;
    }

    @WsdlServiceAddressResolver
    public String getServiceAddress(ServiceDefinition definition) {
        if(StringUtils.isNotEmpty(address)){
            return address;
        }
        if ("SforceService_Soap".equals(definition.getId())) {
            return "https://login.salesforce.com/services/Soap/c/22.0";
        }
        throw new RuntimeException("Unknown Definition");
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }
    
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

}