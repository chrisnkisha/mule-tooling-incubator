/**
 * (c) 2003-2015 MuleSoft, Inc. The software in this package is published under the terms of the CPAL v1.0 license,
 * a copy of which has been included with this distribution in the LICENSE.md file.
 */

package ${project.package}.strategy;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.wsdl.WSDLException;
import javax.wsdl.extensions.ExtensionRegistry;
import javax.wsdl.factory.WSDLFactory;

import org.mule.api.annotations.components.WsdlProvider;
import org.mule.api.annotations.ws.WsdlServiceAddressResolver;
import org.mule.api.annotations.ws.WsdlServiceDefinitionRetriever;
import org.mule.devkit.shade.ws.api.DefaultServiceDefinition;
import org.mule.devkit.shade.ws.api.ServiceDefinition;

/**
 * Wsdl type Strategy
 *
 * @author MuleSoft, Inc.
 */
@WsdlProvider(configElementName = "config-type", friendlyName = "Configuration type strategy")
public class ${project.strategyClassName} {

    @WsdlServiceDefinitionRetriever
    public List<ServiceDefinition> getServiceDefinition() {

        List<ServiceDefinition> serviceDefinitions = new ArrayList<ServiceDefinition>();

#foreach ( $serviceDef in $project.serviceDefinitions )
        serviceDefinitions.add(new DefaultServiceDefinition(
                "${serviceDef.id}",
                "${serviceDef.display}",
                "${serviceDef.location}",
                "${serviceDef.serviceName}", 
                "${serviceDef.servicePort}")
        );
#end
        return serviceDefinitions;
    }

    @WsdlServiceAddressResolver
    public String getServiceAddress(ServiceDefinition definition) {
#foreach ( $serviceDef in $project.serviceDefinitions )
        if ("${serviceDef.id}".equals(definition.getId())) {
            return "${serviceDef.address}";
        }
#end
        throw new RuntimeException("Unknown Definition");
    }

}