/**
 * (c) 2003-2014 MuleSoft, Inc. The software in this package is published under the terms of the CPAL v1.0 license,
 * a copy of which has been included with this distribution in the LICENSE.md file.
 */

package ${package};

#if($OAuthEnaled == true)  
import org.mule.api.annotations.oauth.OAuthProtected;

#end
import org.mule.api.annotations.ConnectionStrategy;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.Processor;

import java.io.IOException;
import org.mule.api.annotations.ReconnectOn;
import org.mule.api.annotations.rest.HttpMethod;
import org.mule.api.annotations.rest.RestCall;
import org.mule.api.annotations.rest.RestUriParam;
#if($hasQuery == true)
import org.mule.api.annotations.Query;
#end

import ${package}.strategy.${StrategyClassName};

/**
 * Anypoint Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name="${moduleName}", schemaVersion="1.0", friendlyName="${connectorName}")
public abstract class ${className}
{
    /**
     * Configurable
     */
    @Configurable
    @Default("value")
    private String myProperty;

    @ConnectionStrategy
    ${StrategyClassName} connectionStrategy;   

    /**
     * Set property
     *
     * @param myProperty My property
     */
    public void setMyProperty(String myProperty) {
        this.myProperty = myProperty;
    }

    /**
     * Get property
     */
    public String getMyProperty() {
        return this.myProperty;
    }

    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/${moduleName}-connector.xml.sample ${moduleName}:my-processor}
     *
     * @param content Content to be processed
     * @return Some string
     * @throws IOException Comment for Exception
     */
    @Processor
#if($OAuthEnaled == true)    
    @OAuthProtected
#end
    @ReconnectOn(exceptions = { Exception.class })
    @RestCall(uri="https://myapiurl/{content}", method=HttpMethod.GET)
    public abstract void myProcessor(@RestUriParam("content") String content) throws IOException;  

#if($hasQuery == true )

    /**
     * Description for query
     *
     * {@sample.xml ../../../doc/${moduleName}-connector.xml.sample ${moduleName}:query-processor}
     *
     *  @param query The dsql query
     *  @return List of elements that match the criteria
     */
    @Processor
    public List<Object> queryProcessor(@Query String query) {
        //TODO
        /*
         * MESSAGE PROCESSOR CODE GOES HERE
         */
        return new ArrayList<Object>();
    }
#end

    public ${StrategyClassName} getConnectionStrategy() {
        return connectionStrategy;
    }

    public void setConnectionStrategy(${StrategyClassName} connectionStrategy) {
        this.connectionStrategy = connectionStrategy;
    }

}