/**
 * (c) 2003-2015 MuleSoft, Inc. The software in this package is published under the terms of the CPAL v1.0 license,
 * a copy of which has been included with this distribution in the LICENSE.md file.
 */

package ${project.package};
#if(${project.hasQuery} == true )

import java.util.ArrayList;
import java.util.List;

#end
#if($project.authenticationType == 'OAUTH_V2')  
import org.mule.api.annotations.oauth.OAuthProtected;

#end
import org.mule.api.annotations.Config;
import org.mule.api.annotations.Connector;
#if(${project.generateDefaultBody} == true )
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.param.Default;
#end
import org.mule.api.annotations.Processor;

import java.io.IOException;
import org.mule.api.annotations.ReconnectOn;
import org.mule.api.annotations.rest.HttpMethod;
import org.mule.api.annotations.rest.RestCall;
import org.mule.api.annotations.rest.RestUriParam;
#if(${project.hasQuery} == true)
import org.mule.api.annotations.Query;
#end

import ${project.package}.config.${project.configClassName};

@Connector(name="${project.moduleName}", friendlyName="${project.connectorName}")
public abstract class ${project.connectorClassName} {
#if(${project.generateDefaultBody} == true )

    /**
     * Greeting message
     */
    @Configurable
    @Default("Hello")
    private String greeting;
#end

    @Config
    ${project.configClassName} config;   

#if(${project.generateDefaultBody} == true )
    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/${project.moduleName}-connector.xml.sample ${project.moduleName}:greet}
     *
     * @param friend Name of a friend we want to greet
     * @return The greeting and reply to the selected friend.
     * @throws IOException Comment for Exception
     */
    @Processor
#if($project.authenticationType == 'OAUTH_V2')    
    @OAuthProtected
#end
    @ReconnectOn(exceptions = { Exception.class })
    @RestCall(uri="https://myapiurl/{friend}", method=HttpMethod.GET)
    public abstract void greet(@RestUriParam("friend") String friend) throws IOException;  
#else
    /**
     * Dummy operation to prevent compilation errors.
     */
    @Processor
    @ReconnectOn(exceptions = { Exception.class })
    @RestCall(uri="https://foo/{param}", method=HttpMethod.GET)
    public abstract void greet(@RestUriParam("param") String param) throws IOException;  
#end

    public ${project.configClassName} getConfig() {
        return config;
    }

    public void setConfig(${project.configClassName} config) {
        this.config = config;
    }

#if(${project.generateDefaultBody} == true )
    /**
     * Set greeting message
     *
     * @param greeting the message
     */
    public void setGreeting(String greeting) {
        this.greeting = greeting;
    }

    /**
     * Get greeting message
     */
    public String getGreeting() {
        return this.greeting;
    }
#end
}