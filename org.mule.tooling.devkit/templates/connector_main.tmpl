package ${package};

import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;

#if($OAuthEnaled == true)
import org.mule.api.annotations.oauth.OAuth2;
import org.mule.api.annotations.oauth.OAuthAccessToken;
import org.mule.api.annotations.oauth.OAuthConsumerKey;
import org.mule.api.annotations.oauth.OAuthConsumerSecret;
import org.mule.api.annotations.oauth.OAuthInvalidateAccessTokenOn;
import org.mule.api.annotations.oauth.OAuthPostAuthorization;
import org.mule.api.annotations.oauth.OAuthProtected;
#end

#if($metadataEnabled == true )
import java.util.List;
import org.mule.common.metadata.*;
import org.mule.common.metadata.datatype.DataType;
import org.mule.api.annotations.MetaDataKeyRetriever;
import org.mule.api.annotations.MetaDataRetriever;
#end


/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name="${moduleName}", schemaVersion="1.0", friendlyName="${moduleName}")
#if($OAuthEnaled == true )
@OAuth2(authorizationUrl = "", accessTokenUrl = "", accessTokenRegex = "", expirationRegex = "", refreshTokenRegex = "")
#end
public class ${className}
{
    /**
     * Configurable
     */
    @Configurable
    private String myProperty;

#if($OAuthEnaled == true )

    /**
     * The OAuth2 client id
     */
    @Configurable
    @OAuthConsumerKey
    private String clientId;

    /**
     * The OAuth2 client secret
     */
    @Configurable
    @OAuthConsumerSecret
    private String clientSecret;

    @OAuthAccessToken
    private String accessToken;
#end
    
#if($metadataEnabled == true )    
     @MetaDataKeyRetriever
    public List<MetaDataKey> getMetaDataKeys() throws Exception {
        return null;
    }

    @MetaDataRetriever
    public MetaData getMetaData(MetaDataKey key) throws Exception {
		return null;	
    }
#end    

    /**
     * Set property
     *
     * @param myProperty My property
     */
    public void setMyProperty(String myProperty)
    {
        this.myProperty = myProperty;
    }

    /**
     * Get property
     */
    public String getMyProperty()
    {
        return this.myProperty;
    }

    /**
     * Connect
     *
     * @param username A username
     * @param password A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String username, String password)
        throws ConnectionException {
        /*
         * CODE FOR ESTABLISHING A CONNECTION GOES IN HERE
         */
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        /*
         * CODE FOR CLOSING A CONNECTION GOES IN HERE
         */
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return true;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
        return "001";
    }

    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/${moduleName}-connector.xml.sample ${moduleName}:myProcessor}
     *
     * @param content Content to be processed
     * @return Some string
     */
    @Processor
#if($OAuthEnaled == true )
    @OAuthProtected
    @OAuthInvalidateAccessTokenOn(exception = Exception.class)
#end
    public String myProcessor(String content)
    {
        /*
         * MESSAGE PROCESSOR CODE GOES HERE
         */

        return content;
    }
    
#if($OAuthEnaled == true )
    @OAuthPostAuthorization
    public void postAuth() {

    }
#end
}