package ${project.package};

#if($project.authenticationType == 'OAUTH_V2')  
import org.mule.api.annotations.oauth.OAuthProtected;

#end
import org.mule.api.annotations.Config;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Processor;

import java.io.IOException;
import org.mule.api.annotations.ReconnectOn;
import org.mule.api.annotations.rest.HttpMethod;
import org.mule.api.annotations.rest.RestCall;
import org.mule.api.annotations.rest.RestUriParam;

import ${project.package}.config.${project.configClassName};

@Connector(name="${project.moduleName}", friendlyName="${project.connectorName}")
public abstract class ${project.connectorClassName} {

    @Config
    ${project.configClassName} config;   

#if(${project.generateDefaultBody} == true )
    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/${project.moduleName}-connector.xml.sample ${project.moduleName}:greet}
     *
     * @param friend Name of a friend we want to greet
     * @return The greeting and reply to the selected friend.
     * @throws IOException Comment for Exception
     */
    @Processor
#if($project.authenticationType == 'OAUTH_V2')    
    @OAuthProtected
#end
    @ReconnectOn(exceptions = { Exception.class })
    @RestCall(uri="https://myapiurl/{friend}", method=HttpMethod.GET)
    public abstract void greet(@RestUriParam("friend") String friend) throws IOException;  
#else
    /**
     * Dummy operation to prevent compilation errors.
     */
    @Processor
    @ReconnectOn(exceptions = { Exception.class })
    @RestCall(uri="https://foo/{param}", method=HttpMethod.GET)
    public abstract void greet(@RestUriParam("param") String param) throws IOException;  
#end

    public ${project.configClassName} getConfig() {
        return config;
    }

    public void setConfig(${project.configClassName} config) {
        this.config = config;
    }

}